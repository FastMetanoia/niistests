

import java.util.UUID
import scala.annotation.tailrec
//

type ID = UUID
type SignalShotMapping = Map[Signal, Set[VideoShot]] // —É—Å–ª–æ–≤–Ω–æ –≥–æ–≤–æ—Ä—è, –Ω–∞—à–∞ –±–¥.

case class Display(id:ID)

case class VideoShot(id:ID)

case class Signal(id:ID)

case class ARM(id:ID, ds:Set[Display], vs:Set[VideoShot], ss:Set[Signal])

case class VCluster(k:Int, vs:Set[VideoShot], ss:Set[Signal])

case class ScenarioValidationStep( configurationId:Int,
                                   arm:ARM,
                                  //display:Display,
                                  videoShot: VideoShot,
                                  ss:Set[Signal])
case class ScenarioBlock(videoshotsConfiguration: VideoshotsConfiguration, steps:Seq[Signal])

case class VideoshotsConfiguration(id:Int, vs:Map[ARM, Set[VideoShot]])

case class Scenario(steps:Seq[ScenarioBlock])

//–®–∞–≥ 1. –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –≤–µ–ª–∏—á–∏–Ω—ã –ö.
def getClustersOfSize(k:Int, arms:Set[ARM], signalShotMapping: SignalShotMapping, oldClusters: Seq[VCluster] = Seq.empty):Set[VCluster] = {
  //–í–æ–∑—å–º—ë–º –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –Ω–∞ k –∏–ª–∏ –±–æ–ª–µ–µ –≤–∏–¥–µ–æ–∫–∞–¥—Ä–∞—Ö.
  //–°—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏–∑ –Ω–∏—Ö –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ vcluster c –æ–¥–Ω–∏–º —Å–∏–≥–Ω–∞–ª–æ–º –∏ –º–æ—â–Ω–æ—Å—Ç—å—é k
  val clusters = for {
    arm <- arms
    (s, videoShots) <- signalShotMapping
    if videoShots.size >= k
    vs <- videoShots.subsets(k)
    if arms.forall(testArm=> testArm.ds.size >= vs.intersect(testArm.vs).size)
    if !oldClusters.exists(c=> vs.subsetOf(c.vs) && c.ss.contains(s))
  } yield VCluster(k, vs, Set(s))

  def mergeClustersStep(clusters: Set[VCluster]): Set[VCluster] = {
    val newClusters = for {
      vc1 <- clusters
      vc2 <- clusters
      if vc1 != vc2
      if vc1.vs == vc2.vs
    } yield ((vc1, vc2), VCluster(vc1.k, vc1.vs, vc1.ss ++ vc2.ss))
    //return newClusters.map(_._2);
    newClusters.map(c => c._2) ++ clusters.filterNot(c => newClusters.exists(nc => nc._1._1 == c || nc._1._2 == c))
  }

  @tailrec
  def mergeClusters(clusters: Set[VCluster]): Set[VCluster] =
    val next = mergeClustersStep(clusters)
    if (next == clusters) clusters else mergeClusters(next)

  mergeClusters(clusters)
}

////–®–∞–≥ 2. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
//def sortClusters(cs:Set[VCluster]):Seq[VCluster] = cs.toSeq.sortBy(c=>c.ss.size)

//–®–∞–≥ 12. –ó–∞–ø–∏—Å—å
def writeScenario(steps:Seq[ScenarioBlock]):Unit =
  println(steps)

//–®–∞–≥ 3. –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —à–∞–≥–∏
//todo: –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –°–ò–ì–ù–ê–õ–´, –≤—ã–∫–∏–Ω—É—Ç—å –≤–∏–¥–µ–æ–∫–∞–¥—Ä—ã.
def getSteps(vClusters:Seq[VCluster], arms:Set[ARM]):Seq[ScenarioBlock] = {
  vClusters.zipWithIndex.map { case (c, i)=>
    val configuration = VideoshotsConfiguration(
      i,
      arms.map{ arm=>
        arm -> arm.vs.intersect(c.vs)
      }.toMap
    )
//    val steps = configuration.vs.flatMap {
//      case (arm, vs) =>
//        vs.map(v=> ScenarioValidationStep(i, arm, v, c.ss))
//    }
    ScenarioBlock(configuration, c.ss.toSeq)
  }
}

//val k = arms.flatMap(_.ds).size
def algLoop(k:Int, arms:Set[ARM], signalShotMapping: SignalShotMapping, clustersTested:Seq[VCluster] = Seq.empty):Seq[VCluster] =
  if(k == 0) clustersTested
  else
    algLoop(
      k - 1, 
      arms, 
      signalShotMapping, 
      clustersTested.appendedAll(getClustersOfSize(k, arms, signalShotMapping, clustersTested))
    )

enum ClusterRelation{
  case CONTAINS
  case PARTICIPATES
  case NONE
}

def calculateRelation(c1:VCluster, c2:VCluster):ClusterRelation =
  import ClusterRelation.*
  if (c1.vs.subsetOf(c2.vs)) PARTICIPATES
  else if (c1.vs.subsetOf(c2.vs)) CONTAINS
  else NONE



def reorganizeVClusters(clusters:Seq[VCluster]):Seq[VCluster] = {
  case class Pack(cluster:VCluster, subClusters:Seq[VCluster])

  def findPack(cluster:VCluster, clusters: Seq[VCluster], known:Seq[VCluster] = Seq.empty): Pack =
    import ClusterRelation.*
    clusters.foldLeft(Pack(cluster, known)) { case (Pack(cluster, subClusters), c) =>
      calculateRelation(cluster, c) match
        case ClusterRelation.CONTAINS => Pack(cluster, subClusters.appended(c))
        case ClusterRelation.PARTICIPATES => return findPack(c, clusters.filterNot(_ == c), known)
        case ClusterRelation.NONE => Pack(cluster, subClusters)
    }

  ???
}



//???

//def algorithmItself(arms:Set[ARM], signalShotMapping: SignalShotMapping):Unit = {
//  //–®–∞–≥ 0. k = |D|
//  var k = arms.flatMap(_.ds).size
//
//  //–®–∞–≥ 1. –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –≤–µ–ª–∏—á–∏–Ω—ã –ö.
//  val clusters = getClustersOfSize(k, arms, signalShotMapping, Seq.empty)
//  //–®–∞–≥ 2. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
//  val sortedClusters = sortClusters(clusters)
//  //–®–∞–≥ 3. –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —à–∞–≥–∏
//  val steps = getSteps(sortedClusters, arms)
//  //–®–∞–≥ 4. ùëò = ùëò ‚àí 1, ‚Ñé = 1;
//  //–ß—Ç–æ —Ç–∞–∫–æ–µ h?
//
//  //h : —Ä–∞–∑ —É–∂ –º—ã —Ö–æ—Ç–∏–º –∏–º–µ—Ç—å –ø–æ–¥ —Ä—É–∫–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ—Ñ–Ω–∏–≥, –ø—Ä–æ—Å—Ç–æ –±—É–¥–µ–º –µ–≥–æ —Ö—Ä–∞–Ω–∏—Ç—å.
//  var lastConfig = steps.last.videoshotsConfiguration
//  k = k - 1
//  //–®–∞–≥ 5. "–ï—Å–ª–∏ ùëò > 0, —Ç–æ –ø–µ—Ä–µ–π—Ç–∏ –∫ —à–∞–≥—É 6, –∏–Ω–∞—á–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —à–∞–≥—É 12"
//  //var writeFlag = true
//  while (k > 0) {
//    //–®–∞–≥ 6 (–∏ 8)
//    val newClusters = getClustersOfSize(k, arms, signalShotMapping, clusters.toSeq)
//    if (newClusters.nonEmpty) {
//      //–®–∞–≥–∏ 8 - 10
//      //–®–∞–≥ 11
//      k = k - 1
//    } else {
//      //–®–∞–≥ 11
//      k = k - 1
//    }
//  }
//  //–®–∞–≥ 12 –ó–∞–ø–∏—Å—å
//  writeScenario(steps)
//}

